[
   {
      "id":"4248dc1c.366e34",
      "type":"ibmiot in",
      "z":"84a370a3.f6a338",
      "authentication":"apiKey",
      "apiKey":"f73d01ad.5500a",
      "inputType":"evt",
      "deviceId":"",
      "applicationId":"",
      "deviceType":"iPhone",
      "eventType":"+",
      "commandType":"",
      "format":"json",
      "name":"IBM Watson IoT Platform",
      "service":"registered",
      "allDevices":true,
      "allApplications":"",
      "allDeviceTypes":true,
      "allEvents":true,
      "allCommands":"",
      "allFormats":"",
      "qos":0,
      "x":128.57144165039062,
      "y":230,
      "wires":[
         [
            "81bac59a.aefea",
            "ea18b9c7.b4ff9",
            "ac4369df.61445",
            "5d59b4ad.2a3c3c",
            "ca170cd8.afe0e"
         ]
      ]
   },
   {
      "id":"d9734db7.a90d78",
      "type":"debug",
      "z":"84a370a3.f6a338",
      "name":"IoT Data to console",
      "active":true,
      "console":"false",
      "complete":"payload",
      "x":728.5714111328125,
      "y":42.85712432861328,
      "wires":[

      ]
   },
   {
      "id":"81bac59a.aefea",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Parse IoT Data to string",
      "func":"\nreturn {payload: JSON.stringify(msg)};",
      "outputs":1,
      "noerr":0,
      "x":468.5714111328125,
      "y":42.85712432861328,
      "wires":[
         [
            "d9734db7.a90d78"
         ]
      ]
   },
   {
      "id":"c1fe0dbe.185848",
      "type":"ui_chart",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"454ddf84.39791",
      "order":2,
      "width":0,
      "height":0,
      "label":"Acceleration",
      "chartType":"line",
      "legend":"true",
      "xformat":"auto",
      "interpolate":"step",
      "nodata":"",
      "dot":false,
      "ymin":"",
      "ymax":"",
      "removeOlder":"1",
      "removeOlderPoints":"1000",
      "removeOlderUnit":"60",
      "cutout":0,
      "useOneColor":false,
      "colors":[
         "#00b80a",
         "#1a33ee",
         "#ff0000",
         "#2ca02c",
         "#98df8a",
         "#d62728",
         "#ff9896",
         "#9467bd",
         "#c5b0d5"
      ],
      "useOldStyle":false,
      "x":1122.85693359375,
      "y":115.71424865722656,
      "wires":[
         [

         ],
         [

         ]
      ]
   },
   {
      "id":"ea18b9c7.b4ff9",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Gyroscope",
      "func":"let gyroscopeX = {};\nlet gyroscopeY = {};\nlet gyroscopeZ = {};\nlet status = {};\nlet exception = null;\n\ngyroscopeX.payload = msg.payload.gyroscope.x;\ngyroscopeX.topic = \"x\";\n\ngyroscopeY.payload = msg.payload.gyroscope.y;\ngyroscopeY.topic = \"y\";\n\ngyroscopeZ.payload = msg.payload.gyroscope.z;\ngyroscopeZ.topic = \"z\";\n\n\n// die Gyroscopewerte auswerten\nconst min = -2;\nconst max = 2;\n\nif (gyroscopeX.payload < min || gyroscopeX.payload > max ||\n    gyroscopeY.payload < min || gyroscopeY.payload > max ||\n    gyroscopeZ.payload < min || gyroscopeZ.payload > max) {\n    status.payload = \"Incorrect handling\";\n    exception = {\n        message: \"Container handeled incorrectly.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.gyroscope.time\n    };\n} else {\n  status.payload = \"Correct handling\";\n}\n\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [gyroscopeX, gyroscopeY, gyroscopeZ, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [gyroscopeX, gyroscopeY, gyroscopeZ, status, exception];\n    } else {\n        return [null, null, null, status, null]\n    }\n}",
      "outputs":"5",
      "noerr":0,
      "x":448.5714416503906,
      "y":270,
      "wires":[
         [
            "83157f03.2908f"
         ],
         [
            "83157f03.2908f"
         ],
         [
            "83157f03.2908f"
         ],
         [
            "554d4292.c83334"
         ],
         [
            "2744959e.a4714a",
            "349192bd.50af5e"
         ]
      ],
      "inputLabels":[
         "IoT Data"
      ],
      "outputLabels":[
         "gyroscopeX",
         "gyroscopeY",
         "gyroscopeZ",
         "status",
         "exception"
      ]
   },
   {
      "id":"83157f03.2908f",
      "type":"ui_chart",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"454ddf84.39791",
      "order":3,
      "width":0,
      "height":0,
      "label":"Gyroscope",
      "chartType":"line",
      "legend":"true",
      "xformat":"auto",
      "interpolate":"step",
      "nodata":"",
      "dot":false,
      "ymin":"",
      "ymax":"",
      "removeOlder":"1",
      "removeOlderPoints":"1000",
      "removeOlderUnit":"60",
      "cutout":0,
      "useOneColor":false,
      "colors":[
         "#00b80a",
         "#1a33ee",
         "#ff0000",
         "#2ca02c",
         "#98df8a",
         "#d62728",
         "#ff9896",
         "#9467bd",
         "#c5b0d5"
      ],
      "useOldStyle":false,
      "x":1125.714111328125,
      "y":337.1428527832031,
      "wires":[
         [

         ],
         [

         ]
      ]
   },
   {
      "id":"bd236a93.a7908",
      "type":"worldmap",
      "z":"84a370a3.f6a338",
      "name":"Map (all devices)",
      "lat":"",
      "lon":"",
      "zoom":"",
      "layer":"OSM",
      "cluster":"",
      "maxage":"",
      "usermenu":"show",
      "layers":"show",
      "panit":"true",
      "x":728.5714416503906,
      "y":430,
      "wires":[

      ]
   },
   {
      "id":"ac4369df.61445",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Location",
      "func":"let location = {};\n\nlocation.name = msg.deviceId;\nlocation.lat = msg.payload.geolocation.latitude;\nlocation.lon = msg.payload.geolocation.longitude;\nlocation.zoom = 15;\n\nreturn {payload: location};",
      "outputs":1,
      "noerr":0,
      "x":438.5714416503906,
      "y":430,
      "wires":[
         [
            "bd236a93.a7908"
         ]
      ]
   },
   {
      "id":"39ad7731.de4b",
      "type":"comment",
      "z":"84a370a3.f6a338",
      "name":"Readme",
      "info":"Das Dashboard kann unter \"/ui\" erreicht werden.\nDie Map mit allen IoT Geräten kann unter \"/worldmap\" eingesehen werden.\n\n\n\nIn den Templates können Angular/Angular-Material directives verwendet werden:\nhttps://material.angularjs.org/latest/api/directive/",
      "x":78.57144165039062,
      "y":70,
      "wires":[

      ]
   },
   {
      "id":"1ffab187.2ab3f6",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"a5477cf0.866368",
      "name":"Image",
      "order":1,
      "width":"6",
      "height":"8",
      "format":"<img src=\"{{msg.payload.image}}\"\n alt='Image'\n width=\"200px\"\n>",
      "storeOutMessages":false,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1102.857177734375,
      "y":507.142822265625,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"4d810bd4.a7fdfc",
      "type":"http in",
      "z":"84a370a3.f6a338",
      "name":"Image Upload",
      "url":"/image-upload",
      "method":"post",
      "upload":true,
      "swaggerDoc":"",
      "x":88.57144165039062,
      "y":510,
      "wires":[
         [
            "1ffab187.2ab3f6",
            "bfb7b1b2.591b68"
         ]
      ]
   },
   {
      "id":"6ef04f11.6933f",
      "type":"ui_dropdown",
      "z":"84a370a3.f6a338",
      "name":"",
      "label":"Select Device",
      "place":"Select option",
      "group":"e6349c96.a25878",
      "order":1,
      "width":0,
      "height":0,
      "passthru":false,
      "options":[
         {
            "label":"Container-1",
            "value":"Container-1",
            "type":"str"
         },
         {
            "label":"Container-2",
            "value":"Container-2",
            "type":"str"
         },
         {
            "label":"Container-3",
            "value":"Container-3",
            "type":"str"
         }
      ],
      "payload":"",
      "topic":"",
      "x":1415.7142333984375,
      "y":278.5714416503906,
      "wires":[
         [
            "2d758921.aec4b6"
         ]
      ]
   },
   {
      "id":"169b4d8f.6965a2",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"ba770d28.c7352",
      "name":"Device Map",
      "order":0,
      "width":"0",
      "height":"0",
      "format":"<iframe src=\"/worldmap\" height=600px ></iframe>",
      "storeOutMessages":true,
      "fwdInMessages":true,
      "templateScope":"local",
      "x":1128.571533203125,
      "y":434.2856750488281,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"b053a26a.6f437",
      "type":"ui_toast",
      "z":"84a370a3.f6a338",
      "position":"top right",
      "displayTime":"3",
      "highlight":"",
      "outputs":0,
      "ok":"OK",
      "cancel":"",
      "topic":"",
      "name":"Exception Notification",
      "x":1155.7142333984375,
      "y":258.5714416503906,
      "wires":[

      ]
   },
   {
      "id":"554d4292.c83334",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"e6349c96.a25878",
      "order":2,
      "width":"5",
      "height":"1",
      "name":"Gyroscope Status",
      "label":"Container Handling",
      "format":"{{msg.payload}}",
      "layout":"row-spread",
      "x":1145.714111328125,
      "y":377.1428527832031,
      "wires":[

      ]
   },
   {
      "id":"ba2d74ac.9f8548",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"e6349c96.a25878",
      "order":3,
      "width":"5",
      "height":"1",
      "name":"Acceleration Status",
      "label":"Container orientation",
      "format":"{{msg.payload}}",
      "layout":"row-spread",
      "x":1144.2854614257812,
      "y":158.57138061523438,
      "wires":[

      ]
   },
   {
      "id":"8c47cb8d.e56cf",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"f9f8438f.ca7ce",
      "name":"List of all exceptions",
      "order":0,
      "width":"15",
      "height":"12",
      "format":"<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"exception in msg.payload | orderBy:'-time'\">\n        <img src=\"http://images.clipartpanda.com/exception-clipart-136637359138898496exception.svg\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <h3>{{exception.message}}</h3>\n          <a href=\"\" ng-click=\"send({payload:exception.deviceId}); location.reload();\"><h4>{{exception.deviceId}}</h4></a>\n          <p>\n            {{exception.timeString}}\n          </p>\n        </div>\n    </md-list-item>\n</md-list>",
      "storeOutMessages":true,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1151.4284057617188,
      "y":214.28570556640625,
      "wires":[
         [
            "6ef04f11.6933f",
            "642a25eb.e814f4",
            "2d758921.aec4b6"
         ]
      ]
   },
   {
      "id":"2744959e.a4714a",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Handel Container Exception",
      "func":"// only if the exception includes a valid time it will be processed\nif (msg.time !== undefined) {\n    // get the current list of exceptions\n    let exceptions = flow.get(\"exceptions\") || []; \n    \n    \n    // retrieve privious message\n    let priviousMessage = flow.get(\"priviousMessage\") || null;\n    \n    // check if current message equals privious message\n    if (priviousMessage !== null && msg.message.localeCompare(priviousMessage.message) === 0 && msg.deviceId.localeCompare(priviousMessage.deviceId) === 0) {\n        // abroad exception\n        return [null, null];\n    } else {\n        // save current message as privious message\n        flow.set(\"priviousMessage\", msg)\n    }\n    \n    // add timeString to exception\n    msg.timeString = new Date(msg.time).toString();\n    \n    // add exception to global list of exceptions\n    exceptions.push(msg);\n    flow.set(\"exceptions\", exceptions);\n    \n    // prepare notification\n    let notification = {};\n    notification.topic = msg.deviceId + \": \" + msg.message;\n    \n    // send global list of exceptions and notification\n    return [{payload: exceptions}, notification];\n} else {\n    return [null, null];\n}",
      "outputs":"2",
      "noerr":0,
      "x":724.2857055664062,
      "y":228.5714111328125,
      "wires":[
         [
            "8c47cb8d.e56cf",
            "23ae7a85.b7f3b6"
         ],
         [

         ]
      ],
      "outputLabels":[
         "list of exceptions",
         "notification"
      ]
   },
   {
      "id":"8e3dc0bf.4c7198",
      "type":"ibmiot out",
      "z":"84a370a3.f6a338",
      "authentication":"apiKey",
      "apiKey":"f73d01ad.5500a",
      "outputType":"cmd",
      "deviceId":"Container-2",
      "deviceType":"container",
      "eventCommandType":"takePicture",
      "format":"json",
      "data":"null",
      "qos":0,
      "name":"Send TakePicture Command to IoT Device",
      "service":"registered",
      "x":848.5714416503906,
      "y":690,
      "wires":[

      ]
   },
   {
      "id":"bfb7b1b2.591b68",
      "type":"http response",
      "z":"84a370a3.f6a338",
      "name":"Success Response",
      "statusCode":"200",
      "headers":{
         "Access-Control-Allow-Origin":"*"
      },
      "x":448.5714416503906,
      "y":550,
      "wires":[

      ]
   },
   {
      "id":"54d72de7.67468c",
      "type":"ui_button",
      "z":"84a370a3.f6a338",
      "name":"Take Picture Button",
      "group":"a5477cf0.866368",
      "order":0,
      "width":"6",
      "height":"1",
      "passthru":false,
      "label":"Take Picture",
      "color":"",
      "bgcolor":"",
      "icon":"camera",
      "payload":"true",
      "payloadType":"bool",
      "topic":"",
      "x":108.57144165039062,
      "y":690,
      "wires":[
         [
            "76dafbfc.95189c"
         ]
      ]
   },
   {
      "id":"ced08e29.8b35d",
      "type":"ui_ui_control",
      "z":"84a370a3.f6a338",
      "name":"Open Devices Tab",
      "x":1625.7142028808594,
      "y":160.00003051757812,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"642a25eb.e814f4",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Open Devices Tab",
      "func":"// this function gets called if a message gets send by the priviouse node\n// the node \"List of all exceptions\" sends a message if a Container-ID form the list gets clicked\nreturn {payload:{tab:\"Devices\"}};",
      "outputs":1,
      "noerr":0,
      "x":1425.7142028808594,
      "y":160.00003051757812,
      "wires":[
         [
            "ced08e29.8b35d"
         ]
      ]
   },
   {
      "id":"76dafbfc.95189c",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Set Device to request an image from",
      "func":"// check if msg selects a new device or triggers the \"takePicture\" command\n// in order to trigger the \"takePicture command\"\nreturn {deviceId:flow.get(\"selectedDevice\")};",
      "outputs":1,
      "noerr":0,
      "x":448.5714416503906,
      "y":690,
      "wires":[
         [
            "8e3dc0bf.4c7198"
         ]
      ]
   },
   {
      "id":"2d758921.aec4b6",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Store currently selected device globally",
      "func":"// Store currently selected device in flow-context\nflow.set(\"selectedDevice\", msg.payload);\n",
      "outputs":1,
      "noerr":0,
      "x":1702.8570251464844,
      "y":220,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"ba47a460.3764b8",
      "type":"ui_switch",
      "z":"84a370a3.f6a338",
      "name":"",
      "label":"Edge analytics",
      "group":"454ddf84.39791",
      "order":1,
      "width":0,
      "height":0,
      "passthru":false,
      "decouple":"false",
      "topic":"",
      "style":"",
      "onvalue":"false",
      "onvalueType":"bool",
      "onicon":"",
      "oncolor":"",
      "offvalue":"true",
      "offvalueType":"bool",
      "officon":"",
      "offcolor":"",
      "x":98.57144165039062,
      "y":810,
      "wires":[
         [
            "d1c947ab.06c8c"
         ]
      ]
   },
   {
      "id":"5d59b4ad.2a3c3c",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Acceleration",
      "func":"let accelerationX = {};\nlet accelerationY = {};\nlet accelerationZ = {};\nlet status = {};\nlet exception = null;\n\naccelerationX.payload = msg.payload.acceleration.x; \naccelerationX.topic = \"x\";\n\naccelerationY.payload = msg.payload.acceleration.y;\naccelerationY.topic = \"y\";\n\naccelerationZ.payload = msg.payload.acceleration.z;\naccelerationZ.topic = \"Z\";\n\n\n// die Accelerationwerte auswerten\nif (accelerationZ.payload > 9) {\n   status.payload = \"Correct position\"; \n} else if (accelerationZ.payload < -9) {\n    status.payload = \"Upside down\";\n    exception = {\n        message: \"Container lies upside down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.payload > 9) {\n    status.payload = \"Left side down\";\n    exception = {\n        message: \"Container lies left side down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.payload < -9) {\n    status.payload = \"Right side down\";\n    exception = {\n        message: \"Container lies right side down.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.payload > 9) {\n    status.payload = \"Turned forward\";\n    exception = {\n        message: \"Container is turned forward.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.payload < -9) {\n    status.payload = \"Turnend backwards\";\n    exception = {\n        message: \"Container is turnend backwards.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else {\n    status.payload = \"No ground contact\";\n    exception = {\n        message: \"Container has no ground contact.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n}\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [accelerationX, accelerationY, accelerationZ, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [accelerationX, accelerationY, accelerationZ, status, exception];\n    } else {\n        return [null, null, null, status, null]\n    }\n}",
      "outputs":"5",
      "noerr":0,
      "x":458.5714416503906,
      "y":170,
      "wires":[
         [
            "c1fe0dbe.185848"
         ],
         [
            "c1fe0dbe.185848"
         ],
         [
            "c1fe0dbe.185848"
         ],
         [
            "ba2d74ac.9f8548"
         ],
         [
            "2744959e.a4714a",
            "349192bd.50af5e"
         ]
      ],
      "inputLabels":[
         "IoT Data"
      ],
      "outputLabels":[
         "accelerationX",
         "accelerationY",
         "accelerationZ",
         "status",
         "exception"
      ]
   },
   {
      "id":"d1c947ab.06c8c",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Store Data Volume Switch",
      "func":"// Store currently selected device in flow-context\nflow.set(\"storeAllData\", msg.payload);",
      "outputs":1,
      "noerr":0,
      "x":388.5714416503906,
      "y":810,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"fba565d7.a10e5",
      "type":"ui_button",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"454ddf84.39791",
      "order":4,
      "width":0,
      "height":0,
      "passthru":false,
      "label":"Clear Graphs",
      "color":"",
      "bgcolor":"",
      "icon":"delete",
      "payload":"[]",
      "payloadType":"json",
      "topic":"",
      "x":921.4285888671875,
      "y":270,
      "wires":[
         [
            "c1fe0dbe.185848",
            "83157f03.2908f"
         ]
      ]
   },
   {
      "id":"ca170cd8.afe0e",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"List of all IoT Devices",
      "func":"let iotDevicesSet = flow.get(\"iotDevicesSet\") || new Set();\niotDevicesSet.add(msg.deviceId);\nreturn {\"listOfDevices\":Array.from(iotDevicesSet), \"exceptionStatusOfDevices\": flow.get(\"iotDeviceExceptionStatus\")};",
      "outputs":1,
      "noerr":0,
      "x":459.7142639160156,
      "y":91.64285278320312,
      "wires":[
         [
            "e2f5f846.22ee08"
         ]
      ]
   },
   {
      "id":"e2f5f846.22ee08",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"2372340f.4351dc",
      "name":"List of all IoT Devices",
      "order":0,
      "width":"6",
      "height":"14",
      "format":"<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"device in msg.listOfDevices\">\n        <img ng-hide=\"!msg.exceptionStatusOfDevices[device]\" src=\"http://www.greendothomer.org/wp-content/uploads/2014/03/bigreddot.png\" class=\"md-avatar\"/>\n        <img ng-hide=\"msg.exceptionStatusOfDevices[device]\" src=\"https://cdn-images-1.medium.com/max/512/1*nZ9VwHTLxAfNCuCjYAkajg.png\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <a href=\"\" ng-click=\"send({payload:device}); location.reload();\"><h3>{{device}}</h3></a>\n        </div>\n    </md-list-item>\n</md-list>",
      "storeOutMessages":true,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1151,
      "y":72,
      "wires":[
         [
            "6ef04f11.6933f",
            "642a25eb.e814f4",
            "2d758921.aec4b6"
         ]
      ]
   },
   {
      "id":"281d664e.c3a362",
      "type":"inject",
      "z":"84a370a3.f6a338",
      "name":"Remove all data",
      "topic":"",
      "payload":"",
      "payloadType":"date",
      "repeat":"",
      "crontab":"",
      "once":false,
      "x":122.70001220703125,
      "y":880.449951171875,
      "wires":[
         [
            "f1d5b16a.f9f22"
         ]
      ]
   },
   {
      "id":"f1d5b16a.f9f22",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Remove all data",
      "func":"flow.set(\"exceptions\", undefined);\nflow.set(\"iotDeviceExceptionStatus\", undefined);\nflow.set(\"iotDevicesSet\", undefined);\nflow.set(\"selectedDevice\", undefined);\nflow.set(\"priviousMessage\", undefined);\nflow.set(\"exceptions\", undefined);\nflow.set(\"exceptions\", undefined);\nflow.set(\"exceptions\", undefined);\nflow.set(\"exceptions\", undefined);\nflow.set(\"exceptions\", undefined);\n",
      "outputs":1,
      "noerr":0,
      "x":356.70001220703125,
      "y":881.1500244140625,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"349192bd.50af5e",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Exception status of all IoT devices",
      "func":"let iotDeviceExceptionStatus = flow.get(\"iotDeviceExceptionStatus\") || {};\n\n// update the status of the specific device\niotDeviceExceptionStatus[msg.deviceId] = true; \n\n// save the iotDeviceExceptionStatus data\nflow.set(\"iotDeviceExceptionStatus\", iotDeviceExceptionStatus);\n\nreturn null;",
      "outputs":1,
      "noerr":0,
      "x":787.6999816894531,
      "y":113.15000915527344,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"23ae7a85.b7f3b6",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"e6349c96.a25878",
      "name":"List of all exceptions",
      "order":5,
      "width":"7",
      "height":"7",
      "format":"<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"exception in msg.payload | orderBy:'-time'\">\n        <img src=\"http://images.clipartpanda.com/exception-clipart-136637359138898496exception.svg\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <h3>{{exception.message}}</h3>\n          <p>\n            {{exception.timeString}}\n          </p>\n        </div>\n    </md-list-item>\n</md-list>",
      "storeOutMessages":true,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1154,
      "y":296.1000061035156,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"d3561b6.6f029e8",
      "type":"ui_button",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"e6349c96.a25878",
      "order":6,
      "width":0,
      "height":0,
      "passthru":false,
      "label":"Clear Exceptions",
      "color":"",
      "bgcolor":"",
      "icon":"delete",
      "payload":"",
      "payloadType":"str",
      "topic":"",
      "x":1144.6999816894531,
      "y":553.9499816894531,
      "wires":[
         [
            "f13183c6.ea168"
         ]
      ]
   },
   {
      "id":"50c80c16.e94754",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"e6349c96.a25878",
      "order":4,
      "width":"7",
      "height":"1",
      "name":"",
      "label":"Exceptions:",
      "format":"",
      "layout":"row-spread",
      "x":1127.7000122070312,
      "y":592.0500183105469,
      "wires":[

      ]
   },
   {
      "id":"f05faed7.d1e9f8",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"e6349c96.a25878",
      "order":3,
      "width":"5",
      "height":"1",
      "name":"Exception status",
      "label":"Exception status",
      "format":"{{msg.payload}}",
      "layout":"row-spread",
      "x":1132.0999755859375,
      "y":630.9000244140625,
      "wires":[

      ]
   },
   {
      "id":"f13183c6.ea168",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Remove all data",
      "func":"flow.set(\"exceptions\", undefined);\nflow.set(\"iotDeviceExceptionStatus\", undefined);",
      "outputs":1,
      "noerr":0,
      "x":1363.6998901367188,
      "y":554,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"f73d01ad.5500a",
      "type":"ibmiot",
      "z":"",
      "name":"Dashboard API Key (rgiw9i)",
      "keepalive":"60",
      "serverName":"rgiw9i.messaging.internetofthings.ibmcloud.com",
      "cleansession":true,
      "appId":"",
      "shared":false
   },
   {
      "id":"454ddf84.39791",
      "type":"ui_group",
      "z":"",
      "name":"IoT Device Data",
      "tab":"c4a586b0.373ca",
      "order":3,
      "disp":true,
      "width":"10"
   },
   {
      "id":"a5477cf0.866368",
      "type":"ui_group",
      "z":"",
      "name":"Image",
      "tab":"c4a586b0.373ca",
      "order":2,
      "disp":true,
      "width":"6"
   },
   {
      "id":"e6349c96.a25878",
      "type":"ui_group",
      "z":"",
      "name":"Device",
      "tab":"c4a586b0.373ca",
      "order":1,
      "disp":true,
      "width":"7"
   },
   {
      "id":"ba770d28.c7352",
      "type":"ui_group",
      "z":"",
      "name":"Map",
      "tab":"c4a586b0.373ca",
      "order":4,
      "disp":true,
      "width":"6"
   },
   {
      "id":"f9f8438f.ca7ce",
      "type":"ui_group",
      "z":"",
      "name":"List of all Exceptions",
      "tab":"eb6cf29.8206e9",
      "order":2,
      "disp":true,
      "width":"15"
   },
   {
      "id":"2372340f.4351dc",
      "type":"ui_group",
      "z":"",
      "name":"Container Overview",
      "tab":"eb6cf29.8206e9",
      "order":1,
      "disp":true,
      "width":"6"
   },
   {
      "id":"c4a586b0.373ca",
      "type":"ui_tab",
      "z":"",
      "name":"Devices",
      "icon":"phone_iphone",
      "order":2
   },
   {
      "id":"eb6cf29.8206e9",
      "type":"ui_tab",
      "z":"",
      "name":"Home",
      "icon":"home",
      "order":1
   }
]