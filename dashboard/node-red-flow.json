[
   {
      "id":"c344078a.016408",
      "type":"ibmiot in",
      "z":"84a370a3.f6a338",
      "authentication":"apiKey",
      "apiKey":"fead9ac9.0c92c8",
      "inputType":"evt",
      "deviceId":"",
      "applicationId":"",
      "deviceType":"iPhone",
      "eventType":"+",
      "commandType":"",
      "format":"json",
      "name":"IBM Watson IoT Platform",
      "service":"registered",
      "allDevices":true,
      "allApplications":"",
      "allDeviceTypes":true,
      "allEvents":true,
      "allCommands":"",
      "allFormats":"",
      "qos":0,
      "x":150,
      "y":220,
      "wires":[
         [
            "9f8f07a2.4a3908",
            "746a894e.29cb2",
            "47ae358.895bbcc",
            "b068b852.db41d",
            "2e035ae.52245a6"
         ]
      ]
   },
   {
      "id":"2875ccbd.03ab84",
      "type":"debug",
      "z":"84a370a3.f6a338",
      "name":"IoT Data to console",
      "active":true,
      "console":"false",
      "complete":"payload",
      "x":750,
      "y":20,
      "wires":[

      ]
   },
   {
      "id":"9f8f07a2.4a3908",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Parse IoT Data to string",
      "func":"\nreturn {payload: JSON.stringify(msg)};",
      "outputs":1,
      "noerr":0,
      "x":490,
      "y":20,
      "wires":[
         [
            "2875ccbd.03ab84"
         ]
      ]
   },
   {
      "id":"58a24db6.2cd3cc",
      "type":"ui_chart",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"806c2d7.c6b0b5",
      "order":1,
      "width":0,
      "height":0,
      "label":"Acceleration",
      "chartType":"line",
      "legend":"true",
      "xformat":"auto",
      "interpolate":"step",
      "nodata":"",
      "dot":false,
      "ymin":"",
      "ymax":"",
      "removeOlder":"1",
      "removeOlderPoints":"1000",
      "removeOlderUnit":"60",
      "cutout":0,
      "useOneColor":false,
      "colors":[
         "#00b80a",
         "#1a33ee",
         "#ff0000",
         "#2ca02c",
         "#98df8a",
         "#d62728",
         "#ff9896",
         "#9467bd",
         "#c5b0d5"
      ],
      "useOldStyle":false,
      "x":1231.4285888671875,
      "y":38.57141876220703,
      "wires":[
         [

         ],
         [

         ]
      ]
   },
   {
      "id":"746a894e.29cb2",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Gyroscope",
      "func":"let gyroscopeX = {};\nlet gyroscopeY = {};\nlet gyroscopeZ = {};\nlet status = {};\nlet exception = null;\n\ngyroscopeX.payload = msg.payload.gyroscope.x;\ngyroscopeX.topic = \"x\";\n\ngyroscopeY.payload = msg.payload.gyroscope.y;\ngyroscopeY.topic = \"y\";\n\ngyroscopeZ.payload = msg.payload.gyroscope.z;\ngyroscopeZ.topic = \"z\";\n\n\n// die Gyroscopewerte auswerten\nconst min = -1;\nconst max = 1;\n\nif (gyroscopeX.payload < min || gyroscopeX.payload > max ||\n    gyroscopeY.payload < min || gyroscopeY.payload > max ||\n    gyroscopeZ.payload < min || gyroscopeZ.payload > max) {\n    status.payload = \"Treated poorly.\";\n    exception = {\n        message: \"Container moved to fast. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.gyroscope.time\n    };\n} else {\n  status.payload = \"Treated well.\";\n}\n\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [gyroscopeX, gyroscopeY, gyroscopeZ, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [gyroscopeX, gyroscopeY, gyroscopeZ, status, exception];\n    } else {\n        return [null, null, null, status, null]\n    }\n}",
      "outputs":"5",
      "noerr":0,
      "x":470.0000305175781,
      "y":377.14288330078125,
      "wires":[
         [
            "3523061f.3f9132"
         ],
         [
            "3523061f.3f9132"
         ],
         [
            "3523061f.3f9132"
         ],
         [
            "2528ddbd.b76992",
            "78996c12.8366bc"
         ],
         [
            "e633f794.7f4b88",
            "da92deb2.db982"
         ]
      ],
      "inputLabels":[
         "IoT Data"
      ],
      "outputLabels":[
         "gyroscopeX",
         "gyroscopeY",
         "gyroscopeZ",
         "status",
         "exception"
      ]
   },
   {
      "id":"3523061f.3f9132",
      "type":"ui_chart",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"806c2d7.c6b0b5",
      "order":2,
      "width":0,
      "height":0,
      "label":"Gyroscope",
      "chartType":"line",
      "legend":"true",
      "xformat":"auto",
      "interpolate":"step",
      "nodata":"",
      "dot":false,
      "ymin":"",
      "ymax":"",
      "removeOlder":"1",
      "removeOlderPoints":"1000",
      "removeOlderUnit":"60",
      "cutout":0,
      "useOneColor":false,
      "colors":[
         "#00b80a",
         "#1a33ee",
         "#ff0000",
         "#2ca02c",
         "#98df8a",
         "#d62728",
         "#ff9896",
         "#9467bd",
         "#c5b0d5"
      ],
      "useOldStyle":false,
      "x":1230,
      "y":357.1428527832031,
      "wires":[
         [

         ],
         [

         ]
      ]
   },
   {
      "id":"6c48bcab.e9b3bc",
      "type":"worldmap",
      "z":"84a370a3.f6a338",
      "name":"Map (all devices)",
      "lat":"",
      "lon":"",
      "zoom":"",
      "layer":"OSM",
      "cluster":"",
      "maxage":"",
      "usermenu":"show",
      "layers":"show",
      "panit":"true",
      "x":747.1429138183594,
      "y":457.1427917480469,
      "wires":[

      ]
   },
   {
      "id":"47ae358.895bbcc",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Location",
      "func":"let location = {};\n\nlocation.name = msg.deviceId;\nlocation.lat = msg.payload.geolocation.latitude;\nlocation.lon = msg.payload.geolocation.longitude;\nlocation.zoom = 15;\n\nreturn {payload: location};",
      "outputs":1,
      "noerr":0,
      "x":457.1429138183594,
      "y":457.1427917480469,
      "wires":[
         [
            "6c48bcab.e9b3bc"
         ]
      ]
   },
   {
      "id":"eb606e32.4cb888",
      "type":"comment",
      "z":"84a370a3.f6a338",
      "name":"Readme",
      "info":"Das Dashboard kann unter \"/ui\" erreicht werden.\nDie Map mit allen IoT Geräten kann unter \"/worldmap\" eingesehen werden.\n\n\n\nIn den Templates können Angular/Angular-Material directives verwendet werden:\nhttps://material.angularjs.org/latest/api/directive/",
      "x":100,
      "y":60,
      "wires":[

      ]
   },
   {
      "id":"1474ba40.d1ba56",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"b58809d2.71d2d",
      "name":"Image",
      "order":1,
      "width":"6",
      "height":"8",
      "format":"<img src=\"{{msg.payload.image}}\"\n alt='Image'\n width=\"200px\"\n>",
      "storeOutMessages":false,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1210,
      "y":500,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"c2d69b1c.d7379",
      "type":"http in",
      "z":"84a370a3.f6a338",
      "name":"Image Upload",
      "url":"/image-upload",
      "method":"post",
      "upload":true,
      "swaggerDoc":"",
      "x":110,
      "y":500,
      "wires":[
         [
            "1474ba40.d1ba56",
            "bde08829.851878",
            "334f0a94.9f7f3e"
         ]
      ]
   },
   {
      "id":"1040e732.679671",
      "type":"ui_dropdown",
      "z":"84a370a3.f6a338",
      "name":"",
      "label":"Select device",
      "place":"Select option",
      "group":"1982e00b.a9b36",
      "order":1,
      "width":0,
      "height":0,
      "passthru":false,
      "options":[
         {
            "label":"Container-1",
            "value":"Container-1",
            "type":"str"
         },
         {
            "label":"Container-2",
            "value":"Container-2",
            "type":"str"
         },
         {
            "label":"Container-3",
            "value":"Container-3",
            "type":"str"
         }
      ],
      "payload":"",
      "topic":"",
      "x":1511.4287109375,
      "y":257.1428527832031,
      "wires":[
         [
            "6c383113.639cd",
            "8e282b71.5cc508"
         ]
      ]
   },
   {
      "id":"a27c420b.c96b6",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"8eddb23d.3c34f8",
      "name":"Device Map",
      "order":0,
      "width":"0",
      "height":"0",
      "format":"<iframe src=\"/worldmap\" height=600px ></iframe>",
      "storeOutMessages":true,
      "fwdInMessages":true,
      "templateScope":"local",
      "x":1230,
      "y":440,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"bab82adc.f4c968",
      "type":"ui_toast",
      "z":"84a370a3.f6a338",
      "position":"top right",
      "displayTime":"3",
      "highlight":"",
      "outputs":0,
      "ok":"OK",
      "cancel":"",
      "topic":"",
      "name":"Exception Notification",
      "x":1260,
      "y":260,
      "wires":[

      ]
   },
   {
      "id":"2528ddbd.b76992",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"1982e00b.a9b36",
      "order":0,
      "width":0,
      "height":0,
      "name":"Gyroscope Status",
      "label":"Container handling",
      "format":"{{msg.payload}}",
      "layout":"row-spread",
      "x":1250,
      "y":397.1428527832031,
      "wires":[

      ]
   },
   {
      "id":"b948f337.56f748",
      "type":"ui_text",
      "z":"84a370a3.f6a338",
      "group":"1982e00b.a9b36",
      "order":0,
      "width":0,
      "height":0,
      "name":"Acceleration Status",
      "label":"Container orientation",
      "format":"{{msg.payload}}",
      "layout":"row-spread",
      "x":1251.4285888671875,
      "y":78.57141876220703,
      "wires":[

      ]
   },
   {
      "id":"3b04e75c.f72db",
      "type":"ui_template",
      "z":"84a370a3.f6a338",
      "group":"7ad96e76.b06668",
      "name":"List of all exceptions",
      "order":0,
      "width":"15",
      "height":"17",
      "format":"<md-list style>\n    <md-list-item class=\"md-3-line\" ng-repeat=\"exception in msg.payload | orderBy:'-time'\">\n        <img src=\"http://images.clipartpanda.com/exception-clipart-136637359138898496exception.svg\" class=\"md-avatar\"/>\n        <div class=\"md-list-item-text\">\n          <h3>{{exception.message}}</h3>\n          <a href=\"\" ng-click=\"send({payload:exception.deviceId}); location.reload();\"><h4>{{exception.deviceId}}</h4></a>\n          <p>\n            {{exception.timeString}}\n          </p>\n        </div>\n    </md-list-item>\n</md-list>",
      "storeOutMessages":true,
      "fwdInMessages":false,
      "templateScope":"local",
      "x":1260,
      "y":220,
      "wires":[
         [
            "1040e732.679671",
            "f0836a8e.c42dc",
            "6c383113.639cd"
         ]
      ]
   },
   {
      "id":"e633f794.7f4b88",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Handel Container Exception",
      "func":"// only if the exception includes a valid time it will be processed\nif (msg.time !== undefined) {\n    // get the current list of exceptions\n    let exceptions = context.get(\"exceptions\") || []; \n    \n    \n    // retrieve privious message\n    let priviousMessage = context.get(\"priviousMessage\") || null;\n    \n    // check if current message equals privious message\n    if (priviousMessage !== null && msg.message.localeCompare(priviousMessage.message) === 0 && msg.deviceId.localeCompare(priviousMessage.deviceId) === 0) {\n        // abroad exception\n        return [null, null];\n    } else {\n        // save current message as privious message\n        context.set(\"priviousMessage\", msg)\n    }\n    \n    // add timeString to exception\n    msg.timeString = new Date(msg.time).toString();\n    \n    // add exception to global list of exceptions\n    exceptions.push(msg);\n    context.set(\"exceptions\", exceptions);\n    \n    // prepare notification\n    let notification = {};\n    notification.topic = msg.deviceId + \": \" + msg.message;\n    \n    // send global list of exceptions and notification\n    return [{payload: exceptions}, notification];\n} else {\n    return [null, null];\n}",
      "outputs":"2",
      "noerr":0,
      "x":760,
      "y":224.28573608398438,
      "wires":[
         [
            "3b04e75c.f72db"
         ],
         [
            "bab82adc.f4c968"
         ]
      ],
      "outputLabels":[
         "list of exceptions",
         "notification"
      ]
   },
   {
      "id":"24027ea4.d7e982",
      "type":"ibmiot out",
      "z":"84a370a3.f6a338",
      "authentication":"apiKey",
      "apiKey":"fead9ac9.0c92c8",
      "outputType":"cmd",
      "deviceId":"Container-2",
      "deviceType":"container",
      "eventCommandType":"takePicture",
      "format":"json",
      "data":"null",
      "qos":0,
      "name":"Send TakePicture Command to IoT Device",
      "service":"registered",
      "x":870,
      "y":640,
      "wires":[

      ]
   },
   {
      "id":"bde08829.851878",
      "type":"http response",
      "z":"84a370a3.f6a338",
      "name":"Success Response",
      "statusCode":"200",
      "headers":{
         "Access-Control-Allow-Origin":"*"
      },
      "x":470,
      "y":580,
      "wires":[

      ]
   },
   {
      "id":"cfd9a955.b40da",
      "type":"ui_button",
      "z":"84a370a3.f6a338",
      "name":"Take Picture Button",
      "group":"b58809d2.71d2d",
      "order":0,
      "width":"6",
      "height":"1",
      "passthru":false,
      "label":"Take Picture",
      "color":"",
      "bgcolor":"",
      "icon":"camera",
      "payload":"true",
      "payloadType":"bool",
      "topic":"",
      "x":130,
      "y":640,
      "wires":[
         [
            "1362b27e.530e56"
         ]
      ]
   },
   {
      "id":"271920b3.a51bf8",
      "type":"ui_ui_control",
      "z":"84a370a3.f6a338",
      "name":"Open Devices Tab",
      "x":1714.2857666015625,
      "y":164.28570556640625,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"f0836a8e.c42dc",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Open Devices Tab",
      "func":"// this function gets called if a message gets send by the priviouse node\n// the node \"List of all exceptions\" sends a message if a Container-ID form the list gets clicked\nreturn {payload:{tab:\"Devices\"}};",
      "outputs":1,
      "noerr":0,
      "x":1514.2857666015625,
      "y":164.28570556640625,
      "wires":[
         [
            "271920b3.a51bf8"
         ]
      ]
   },
   {
      "id":"1362b27e.530e56",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Set Device to request an image from",
      "func":"// check if msg selects a new device or triggers the \"takePicture\" command\n// in order to trigger the \"takePicture command\"\nreturn {deviceId:flow.get(\"selectedDevice\")};",
      "outputs":1,
      "noerr":0,
      "x":470,
      "y":640,
      "wires":[
         [
            "24027ea4.d7e982"
         ]
      ]
   },
   {
      "id":"6c383113.639cd",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Store currently selected device globally",
      "func":"// Store currently selected device in flow-context\nflow.set(\"selectedDevice\", msg.payload);\n",
      "outputs":1,
      "noerr":0,
      "x":1791.4287109375,
      "y":221.42855834960938,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"176ca05c.456308",
      "type":"ui_switch",
      "z":"84a370a3.f6a338",
      "name":"",
      "label":"Process all data",
      "group":"1982e00b.a9b36",
      "order":0,
      "width":0,
      "height":0,
      "passthru":false,
      "decouple":"false",
      "topic":"",
      "style":"",
      "onvalue":"true",
      "onvalueType":"bool",
      "onicon":"",
      "oncolor":"",
      "offvalue":"false",
      "offvalueType":"bool",
      "officon":"",
      "offcolor":"",
      "x":120,
      "y":700,
      "wires":[
         [
            "c86df9f9.94dd2"
         ]
      ]
   },
   {
      "id":"b068b852.db41d",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Extract Acceleration",
      "func":"let accelerationX = {};\nlet accelerationY = {};\nlet accelerationZ = {};\nlet status = {};\nlet exception = null;\n\naccelerationX.payload = msg.payload.acceleration.x; \naccelerationX.topic = \"x\";\n\naccelerationY.payload = msg.payload.acceleration.y;\naccelerationY.topic = \"y\";\n\naccelerationZ.payload = msg.payload.acceleration.z;\naccelerationZ.topic = \"z\";\n\n\n// die Accelerationwerte auswerten\nif (accelerationZ.payload > 9) {\n   status.payload = \"Container stands correctly.\"; \n} else if (accelerationZ.payload < -9) {\n    status.payload = \"Container lies on the top.\";\n    exception = {\n        message: \"Container lies on the top. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.payload > 9) {\n    status.payload = \"Container lies on the left side.\";\n    exception = {\n        message: \"Container lies on the left side. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationX.payload < -9) {\n    status.payload = \"Container lies on the right side.\";\n    exception = {\n        message: \"Container lies on the right side. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.payload > 9) {\n    status.payload = \"Container stands on the front.\";\n    exception = {\n        message: \"Container stands on the front. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else if (accelerationY.payload < -9) {\n    status.payload = \"Container stands on the back.\";\n    exception = {\n        message: \"Container stands on the back. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n} else {\n    status.payload = \"Container is not doing well.\";\n    exception = {\n        message: \"Container is not doing well. Goods may be damaged.\",\n        deviceId: msg.deviceId,\n        time: msg.payload.acceleration.time\n    };\n}\n\n// test if only exception data should be stored or if all the data should be stored\nif (flow.get(\"storeAllData\")) {\n    // all data\n    return [accelerationX, accelerationY, accelerationZ, status, exception];\n} else {\n    // only exception data\n    if (exception !== null) {\n        return [accelerationX, accelerationY, accelerationZ, status, exception];\n    } else {\n        return [null, null, null, status, null]\n    }\n}",
      "outputs":"5",
      "noerr":0,
      "x":480,
      "y":160,
      "wires":[
         [
            "58a24db6.2cd3cc"
         ],
         [
            "58a24db6.2cd3cc"
         ],
         [
            "58a24db6.2cd3cc"
         ],
         [
            "b948f337.56f748",
            "1eaa66ee.d8f049"
         ],
         [
            "e633f794.7f4b88",
            "da92deb2.db982"
         ]
      ],
      "inputLabels":[
         "IoT Data"
      ],
      "outputLabels":[
         "accelerationX",
         "accelerationY",
         "accelerationZ",
         "status",
         "exception"
      ]
   },
   {
      "id":"c86df9f9.94dd2",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Store Data Volume Switch",
      "func":"// Store currently selected device in flow-context\nflow.set(\"storeAllData\", msg.payload);",
      "outputs":1,
      "noerr":0,
      "x":430,
      "y":700,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"404c40b.b672dc",
      "type":"ui_button",
      "z":"84a370a3.f6a338",
      "name":"",
      "group":"806c2d7.c6b0b5",
      "order":3,
      "width":0,
      "height":0,
      "passthru":false,
      "label":"Clear Graphs",
      "color":"",
      "bgcolor":"",
      "icon":"delete",
      "payload":"[]",
      "payloadType":"json",
      "topic":"",
      "x":1030,
      "y":260,
      "wires":[
         [
            "58a24db6.2cd3cc",
            "3523061f.3f9132"
         ]
      ]
   },
   {
      "id":"2e035ae.52245a6",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"!!Persist Data in Flow-Context",
      "func":"// Liste aller IoT Devices\n// Acceleration Data aller IoT Devices (letzten 1000 Datenpunkte)\n// Gyroscope Daten aller IoT Devices (letzten 1000 Datenpunkte)\n// Letzten Standort aller IoT Devices",
      "outputs":1,
      "noerr":0,
      "x":510,
      "y":80,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"334f0a94.9f7f3e",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"!!Persist Images in Flow-Context",
      "func":"// Letztes Bild eines jeden IoT Devices",
      "outputs":1,
      "noerr":0,
      "x":510,
      "y":540,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"da92deb2.db982",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"!!Persist Exceptions in Flow-Context",
      "func":"// Exception Status aller IoT Devices\n// Listen an Exceptions aller IoT Devices",
      "outputs":1,
      "noerr":0,
      "x":790,
      "y":265.7143249511719,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"8e282b71.5cc508",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"Update Devices Tab",
      "func":"\n// Set Acceleration Graph\n// Set Acceleration Status\n// Set Gyroscope Graph\n// Set Gyroscope Status\n// Set Location\n// Set Image\n// Set Exceptions\n\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":1742.5,
      "y":319.75,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"78996c12.8366bc",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"!!Persist Acceleration Status",
      "func":"// Gyroscope Status",
      "outputs":1,
      "noerr":0,
      "x":762.857177734375,
      "y":302.8571472167969,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"1eaa66ee.d8f049",
      "type":"function",
      "z":"84a370a3.f6a338",
      "name":"!!Persist Acceleration Status",
      "func":"// Acceleration Status",
      "outputs":1,
      "noerr":0,
      "x":761.4285278320312,
      "y":184.28573608398438,
      "wires":[
         [

         ]
      ]
   },
   {
      "id":"fead9ac9.0c92c8",
      "type":"ibmiot",
      "z":"",
      "name":"Dashboard API Key (rgiw9i)",
      "keepalive":"60",
      "serverName":"rgiw9i.messaging.internetofthings.ibmcloud.com",
      "cleansession":true,
      "appId":"",
      "shared":false
   },
   {
      "id":"806c2d7.c6b0b5",
      "type":"ui_group",
      "z":"",
      "name":"IoT Device Data",
      "tab":"cce870ff.62ed98",
      "order":3,
      "disp":true,
      "width":"10"
   },
   {
      "id":"b58809d2.71d2d",
      "type":"ui_group",
      "z":"",
      "name":"Image",
      "tab":"cce870ff.62ed98",
      "order":2,
      "disp":true,
      "width":"6"
   },
   {
      "id":"1982e00b.a9b36",
      "type":"ui_group",
      "z":"",
      "name":"Device",
      "tab":"cce870ff.62ed98",
      "order":1,
      "disp":true,
      "width":"6"
   },
   {
      "id":"8eddb23d.3c34f8",
      "type":"ui_group",
      "z":"",
      "name":"Map",
      "tab":"cce870ff.62ed98",
      "disp":true,
      "width":"6"
   },
   {
      "id":"7ad96e76.b06668",
      "type":"ui_group",
      "z":"",
      "name":"List of all Exceptions",
      "tab":"eb6cf29.8206e9",
      "disp":true,
      "width":"15"
   },
   {
      "id":"cce870ff.62ed98",
      "type":"ui_tab",
      "z":"",
      "name":"Devices",
      "icon":"phone_iphone",
      "order":2
   },
   {
      "id":"eb6cf29.8206e9",
      "type":"ui_tab",
      "z":"",
      "name":"Home",
      "icon":"home",
      "order":1
   }
]